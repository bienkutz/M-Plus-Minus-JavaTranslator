/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java_cup.runtime.Symbol;   // For working with symbols
import java_cup.runtime.lr_parser; // CUP parser superclass for custom error handling
import cup.example.TreeNode;
import cup.example.TreeNodePrinter;

parser code {:
  protected Lexer lexer;
  protected TreeNode root = new TreeNode("Program");

  public TreeNode getParTreeRoot() {
    return root;
  }
:}

/* define how to connect to the scanner! */
init with {: 
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals */
terminal ADD, SUB, MUL, DIV;
terminal AND, OR, NOT;
terminal EQUAL, LT, GT, LE, GE;
terminal ASSIGN;
terminal LPAR, RPAR, CLPAR, CRPAR, SLPAR, SRPAR;
terminal COLON, SEMICOLON, COMMA;
terminal IF, THEN, WHILE, DO, READ, ELSE, BEGIN, END, PRINT;
terminal INT, BOOL, REAL, VAR, SIZE, FLOAT, FLOOR, CEIL, FUN, RETURN;
terminal Integer IVAL;
terminal Float RVAL;
terminal Boolean BVAL;
terminal String ID;

non terminal TreeNode prog, block, declarations, declaration, var_declaration;
non terminal TreeNode type, array_dimensions, fun_declaration, fun_block, param_list, parameters;
non terminal TreeNode more_parameters, basic_declaration, basic_array_dimensions, program_body, fun_body;
non terminal TreeNode prog_stmts, prog_stmt, identifier, expr, bint_term, bint_factor, compare_op, int_expr;
non terminal TreeNode addop, int_term, mulop, int_factor, modifier_list, arguments, more_arguments;

/* Precedences */
precedence left OR, AND;
precedence left ADD, SUB;
precedence left MUL, DIV;
precedence left EQUAL, LT, GT, LE, GE;

/* Grammar Rules */
prog ::= block:b 
          {: 
             System.out.println("Program starts");
             TreeNode node = new TreeNode("Program");
             node.addChild(b);
             root = node; 
             RESULT = node;
          :};

block ::= declarations:d program_body:pb
          {: 
             System.out.println("Block start");
             TreeNode node = new TreeNode("Block");
             node.addChild(d);
             node.addChild(pb);
             RESULT = node; 
          :};

declarations ::= declaration:dec SEMICOLON declarations:decs 
                 {: 
                    TreeNode node = new TreeNode("Declarations");
                    node.addChild(dec);
                    node.addChild(decs);
                    RESULT = node; 
                 :}
               | 
                 {: RESULT = new TreeNode("EmptyDeclarations"); :};

declaration ::= var_declaration:vdec 
                 {: 
                    TreeNode node = new TreeNode("VariableDeclaration");
                    node.addChild(vdec);
                    RESULT = node; 
                 :}
               | fun_declaration:fdec 
                 {: 
                    TreeNode node = new TreeNode("FunctionDeclaration");
                    node.addChild(fdec);
                    RESULT = node; 
                 :};

var_declaration ::= VAR ID:id array_dimensions:adims COLON type:t 
                    {: 
                       TreeNode node = new TreeNode("VarDecl");
                       node.addChild(new TreeNode("ID: " + id));
                       node.addChild(adims);
                       node.addChild(t);
                       RESULT = node; 
                    :};

type ::= INT
         {: RESULT = new TreeNode("Type: INT"); :}
       | REAL
         {: RESULT = new TreeNode("Type: REAL"); :}
       | BOOL
         {: RESULT = new TreeNode("Type: BOOL"); :};

array_dimensions ::= SLPAR expr:ex SRPAR array_dimensions:adims 
                     {: 
                        TreeNode node = new TreeNode("ArrayDimensions");
                        node.addChild(ex);
                        node.addChild(adims);
                        RESULT = node; 
                     :}
                   | 
                     {: RESULT = new TreeNode("NoArrayDimensions"); :};

fun_declaration ::= FUN ID:id param_list:pl COLON type:t CLPAR fun_block:fb CRPAR
                    {: 
                       TreeNode node = new TreeNode("FunDecl");
                       node.addChild(new TreeNode("ID: " + id));
                       node.addChild(pl);
                       node.addChild(t);
                       node.addChild(fb);
                       RESULT = node; 
                    :};
                    
fun_block ::= declarations:d fun_body:fb
              {:
                 TreeNode node = new TreeNode("FunBlock");
                 node.addChild(d);
                 node.addChild(fb);
                 RESULT = node;
              :};

param_list ::= LPAR parameters:ps RPAR
               {:
                  TreeNode node = new TreeNode("ParamList");
                  node.addChild(ps);
                  RESULT = node;
               :};

parameters ::= basic_declaration:bd more_parameters:mps
               {:
                  TreeNode node = new TreeNode("Parameters");
                  node.addChild(bd);
                  node.addChild(mps);
                  RESULT = node;
               :}
             | {:
                  RESULT = new TreeNode("NoParameters");
               :};

more_parameters ::= COMMA basic_declaration:bd more_parameters:mps
                    {:
                       TreeNode node = new TreeNode("MoreParameters");
                       node.addChild(bd);
                       node.addChild(mps);
                       RESULT = node;
                    :}
                  | {:
                       RESULT = new TreeNode("EndOfParameters");
                    :};

basic_declaration ::= ID:id basic_array_dimensions:badims COLON type:t
                      {:
                         TreeNode node = new TreeNode("BasicDeclaration");
                         node.addChild(new TreeNode("ID: " + id));
                         node.addChild(badims);
                         node.addChild(t);
                         RESULT = node;
                      :};

basic_array_dimensions ::= SLPAR SRPAR basic_array_dimensions:badims
                           {:
                              TreeNode node = new TreeNode("ArrayDimension");
                              node.addChild(badims);
                              RESULT = node;
                           :}
                         | {:
                              RESULT = new TreeNode("NoDimensions");
                           :};

program_body ::= BEGIN prog_stmts:ps END
                 {:
                    TreeNode node = new TreeNode("ProgramBody");
                    node.addChild(ps);
                    RESULT = node;
                 :};

fun_body ::= BEGIN prog_stmts:ps RETURN expr:ex SEMICOLON END
             {:
                TreeNode node = new TreeNode("FunBody");
                node.addChild(ps);
                node.addChild(ex);
                RESULT = node;
             :};

prog_stmts ::= prog_stmt:pgs SEMICOLON prog_stmts:ps
               {:
                  TreeNode node = new TreeNode("ProgStatements");
                  node.addChild(pgs);
                  node.addChild(ps);
                  RESULT = node;
               :}
             | {:
                  RESULT = new TreeNode("EmptyStatements");
               :};

prog_stmt ::= IF expr:ex THEN prog_stmt:pgs ELSE prog_stmt:pgst
              {:
                 TreeNode node = new TreeNode("IfStmt");
                 node.addChild(ex);
                 node.addChild(pgs);
                 node.addChild(pgst);
                 RESULT = node;
              :}
            | WHILE expr:ex DO prog_stmt:pgs
              {:
                 TreeNode node = new TreeNode("WhileStmt");
                 node.addChild(ex);
                 node.addChild(pgs);
                 RESULT = node;
              :}
            | READ identifier:idf
              {:
                 TreeNode node = new TreeNode("ReadStmt");
                 node.addChild(idf);
                 RESULT = node;
              :}
            | identifier:idf ASSIGN expr:ex
              {:
                 TreeNode node = new TreeNode("AssignStmt");
                 node.addChild(idf);
                 node.addChild(ex);
                 RESULT = node;
              :}
            | PRINT expr:ex
              {:
                 TreeNode node = new TreeNode("PrintStmt");
                 node.addChild(ex);
                 RESULT = node;
              :}
            | CLPAR block:b CRPAR
              {:
                 TreeNode node = new TreeNode("BlockStmt");
                 node.addChild(b);
                 RESULT = node;
              :};

identifier ::= ID:id array_dimensions:adims
               {:
                  TreeNode node = new TreeNode("Identifier");
                  node.addChild(new TreeNode("ID: " + id));
                  node.addChild(adims);
                  RESULT = node;
               :};

expr ::= expr:ex OR bint_term:bt
         {:
            TreeNode node = new TreeNode("OrExpr");
            node.addChild(ex);
            node.addChild(bt);
            RESULT = node;
         :}
       | bint_term:bt
         {:
            RESULT = bt;
         :};

bint_term ::= bint_term:bt AND bint_factor:bf
              {:
                 TreeNode node = new TreeNode("AndExpr");
                 node.addChild(bt);
                 node.addChild(bf);
                 RESULT = node;
              :}
            | bint_factor:bf
              {:
                 RESULT = bf;
              :};

bint_factor ::= NOT bint_factor:bf
                {:
                   TreeNode node = new TreeNode("NotExpr");
                   node.addChild(bf);
                   RESULT = node;
                :}
              | int_expr:ie compare_op:cop int_expr:iex
                {:
                   TreeNode node = new TreeNode("CompareExpr");
                   node.addChild(ie);
                   node.addChild(cop);
                   node.addChild(iex);
                   RESULT = node;
                :}
              | int_expr:ie
                {:
                   RESULT = ie;
                :};

compare_op ::= EQUAL
               {:
                  RESULT = new TreeNode("Equals");
               :}
             | LT
               {:
                  RESULT = new TreeNode("LessThan");
               :}
             | GT
               {:
                  RESULT = new TreeNode("GreaterThan");
               :}
             | LE
               {:
                  RESULT = new TreeNode("LessOrEqual");
               :}
             | GE
               {:
                  RESULT = new TreeNode("GreaterOrEqual");
               :};

int_expr ::= int_expr:ie addop:aop int_term:it
             {:
                TreeNode node = new TreeNode("AddSubExpr");
                node.addChild(ie);
                node.addChild(aop);
                node.addChild(it);
                RESULT = node;
             :}
           | int_term:it
             {:
                RESULT = it;
             :};

addop ::= ADD
          {:
             RESULT = new TreeNode("AddOp");
          :}
        | SUB
          {:
             RESULT = new TreeNode("SubOp");
          :};

int_term ::= int_term:it mulop:mop int_factor:ifa
             {:
                TreeNode node = new TreeNode("MulDivExpr");
                node.addChild(it);
                node.addChild(mop);
                node.addChild(ifa);
                RESULT = node;
             :}
           | int_factor:ifa
             {:
                RESULT = ifa;
             :};

mulop ::= MUL
          {:
             RESULT = new TreeNode("MulOp");
          :}
        | DIV
          {:
             RESULT = new TreeNode("DivOp");
          :};

int_factor ::= LPAR expr:ex RPAR
               {:
                  TreeNode node = new TreeNode("ParenExpr");
                  node.addChild(ex);
                  RESULT = node;
               :}
             | SIZE LPAR ID:id basic_array_dimensions:badims RPAR
               {:
                  TreeNode node = new TreeNode("SizeExpr");
                  node.addChild(new TreeNode("ID: " + id));
                  node.addChild(badims);
                  RESULT = node;
               :}
             | FLOAT LPAR expr:ex RPAR
               {:
                  TreeNode node = new TreeNode("FloatExpr");
                  node.addChild(ex);
                  RESULT = node;
               :}
             | FLOOR LPAR expr:ex RPAR
               {:
                  TreeNode node = new TreeNode("FloorExpr");
                  node.addChild(ex);
                  RESULT = node;
               :}
             | CEIL LPAR expr:ex RPAR
               {:
                  TreeNode node = new TreeNode("CeilExpr");
                  node.addChild(ex);
                  RESULT = node;
               :}
             | ID:id modifier_list:ml
               {:
                  TreeNode node = new TreeNode("IdExpr");
                  node.addChild(new TreeNode("ID: " + id));
                  node.addChild(ml);
                  RESULT = node;
               :}
             | IVAL:i
               {:
                  TreeNode node = new TreeNode("IntLiteral");
                  node.addChild(new TreeNode("Value: " + i));
                  RESULT = node;
               :}
             | RVAL:r
               {:
                  TreeNode node = new TreeNode("RealLiteral");
                  node.addChild(new TreeNode("Value: " + r));
                  RESULT = node;
               :}
             | BVAL:b
               {:
                  TreeNode node = new TreeNode("BoolLiteral");
                  node.addChild(new TreeNode("Value: " + b));
                  RESULT = node;
               :}
             | SUB int_factor:ifa
               {:
                  TreeNode node = new TreeNode("NegExpr");
                  node.addChild(ifa);
                  RESULT = node;
               :};

modifier_list ::= LPAR arguments:args RPAR
                  {:
                     TreeNode node = new TreeNode("ModifierArgs");
                     node.addChild(args);
                     RESULT = node;
                  :}
                | array_dimensions:adims
                  {:
                     RESULT = adims;
                  :};

arguments ::= expr:ex more_arguments:margs
              {:
                 TreeNode node = new TreeNode("Arguments");
                 node.addChild(ex);
                 node.addChild(margs);
                 RESULT = node;
              :}
            | {:
                 RESULT = new TreeNode("NoArguments");
              :};

more_arguments ::= COMMA expr:ex more_arguments:margs
                   {:
                      TreeNode node = new TreeNode("MoreArguments");
                      node.addChild(ex);
                      node.addChild(margs);
                      RESULT = node;
                   :}
                 | {:
                      RESULT = new TreeNode("EndOfArguments");
                   :};
                    